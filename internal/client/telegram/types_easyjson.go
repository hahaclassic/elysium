// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tgclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram(in *jlexer.Lexer, out *UpdatesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]*Update, 0, 8)
					} else {
						out.Result = []*Update{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Update
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Update)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Result = append(out.Result, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram(out *jwriter.Writer, in UpdatesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Result {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdatesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdatesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdatesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdatesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram1(in *jlexer.Lexer, out *Update) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "update_id":
			out.ID = int(in.Int())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(InputMessage)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "callback_query":
			if in.IsNull() {
				in.Skip()
				out.CallbackQuery = nil
			} else {
				if out.CallbackQuery == nil {
					out.CallbackQuery = new(CallbackQuery)
				}
				(*out.CallbackQuery).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram1(out *jwriter.Writer, in Update) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"update_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"callback_query\":"
		out.RawString(prefix)
		if in.CallbackQuery == nil {
			out.RawString("null")
		} else {
			(*in.CallbackQuery).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Update) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Update) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Update) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Update) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram1(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram2(in *jlexer.Lexer, out *PostRequestResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(OutputMessage)
				}
				(*out.Result).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram2(out *jwriter.Writer, in PostRequestResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Ok))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		if in.Result == nil {
			out.RawString("null")
		} else {
			(*in.Result).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PostRequestResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PostRequestResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PostRequestResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PostRequestResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram2(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram3(in *jlexer.Lexer, out *OutputMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "message_id":
			out.MessageID = int(in.Int())
		case "entities":
			if in.IsNull() {
				in.Skip()
				out.Entities = nil
			} else {
				in.Delim('[')
				if out.Entities == nil {
					if !in.IsDelim(']') {
						out.Entities = make([]*MessageEntity, 0, 8)
					} else {
						out.Entities = []*MessageEntity{}
					}
				} else {
					out.Entities = (out.Entities)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(MessageEntity)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Entities = append(out.Entities, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parse_mode":
			out.ParseMode = string(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				(*out.ReplyMarkup).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram3(out *jwriter.Writer, in OutputMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix)
		out.Int(int(in.MessageID))
	}
	if len(in.Entities) != 0 {
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Entities {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parse_mode\":"
		out.RawString(prefix)
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		const prefix string = ",\"reply_markup\":"
		out.RawString(prefix)
		(*in.ReplyMarkup).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutputMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutputMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutputMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutputMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram3(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram4(in *jlexer.Lexer, out *MessageEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "length":
			out.Length = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "custom_emoji_id":
			out.CustomEmojiID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram4(out *jwriter.Writer, in MessageEntity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int(int(in.Offset))
	}
	{
		const prefix string = ",\"length\":"
		out.RawString(prefix)
		out.Int(int(in.Length))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"custom_emoji_id\":"
		out.RawString(prefix)
		out.String(string(in.CustomEmojiID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram4(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram5(in *jlexer.Lexer, out *InputMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(From)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "chat":
			if in.IsNull() {
				in.Skip()
				out.Chat = nil
			} else {
				if out.Chat == nil {
					out.Chat = new(Chat)
				}
				(*out.Chat).UnmarshalEasyJSON(in)
			}
		case "entities":
			if in.IsNull() {
				in.Skip()
				out.Entities = nil
			} else {
				in.Delim('[')
				if out.Entities == nil {
					if !in.IsDelim(']') {
						out.Entities = make([]*MessageEntity, 0, 8)
					} else {
						out.Entities = []*MessageEntity{}
					}
				} else {
					out.Entities = (out.Entities)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(MessageEntity)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Entities = append(out.Entities, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram5(out *jwriter.Writer, in InputMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		if in.From == nil {
			out.RawString("null")
		} else {
			(*in.From).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"chat\":"
		out.RawString(prefix)
		if in.Chat == nil {
			out.RawString("null")
		} else {
			(*in.Chat).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		if in.Entities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Entities {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram5(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram6(in *jlexer.Lexer, out *InlineKeyboardMarkup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inline_keyboard":
			if in.IsNull() {
				in.Skip()
				out.InlineKeyboard = nil
			} else {
				in.Delim('[')
				if out.InlineKeyboard == nil {
					if !in.IsDelim(']') {
						out.InlineKeyboard = make([][]*InlineKeyboardButton, 0, 2)
					} else {
						out.InlineKeyboard = [][]*InlineKeyboardButton{}
					}
				} else {
					out.InlineKeyboard = (out.InlineKeyboard)[:0]
				}
				for !in.IsDelim(']') {
					var v10 []*InlineKeyboardButton
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						in.Delim('[')
						if v10 == nil {
							if !in.IsDelim(']') {
								v10 = make([]*InlineKeyboardButton, 0, 8)
							} else {
								v10 = []*InlineKeyboardButton{}
							}
						} else {
							v10 = (v10)[:0]
						}
						for !in.IsDelim(']') {
							var v11 *InlineKeyboardButton
							if in.IsNull() {
								in.Skip()
								v11 = nil
							} else {
								if v11 == nil {
									v11 = new(InlineKeyboardButton)
								}
								(*v11).UnmarshalEasyJSON(in)
							}
							v10 = append(v10, v11)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InlineKeyboard = append(out.InlineKeyboard, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram6(out *jwriter.Writer, in InlineKeyboardMarkup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"inline_keyboard\":"
		out.RawString(prefix[1:])
		if in.InlineKeyboard == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.InlineKeyboard {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v14, v15 := range v13 {
						if v14 > 0 {
							out.RawByte(',')
						}
						if v15 == nil {
							out.RawString("null")
						} else {
							(*v15).MarshalEasyJSON(out)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardMarkup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardMarkup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram6(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram7(in *jlexer.Lexer, out *InlineKeyboardButton) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "callback_data":
			out.CallbackData = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram7(out *jwriter.Writer, in InlineKeyboardButton) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"callback_data\":"
		out.RawString(prefix)
		out.String(string(in.CallbackData))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardButton) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram7(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram8(in *jlexer.Lexer, out *From) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserID = int(in.Int())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram8(out *jwriter.Writer, in From) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v From) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v From) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *From) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *From) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram8(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram9(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram9(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram9(l, v)
}
func easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram10(in *jlexer.Lexer, out *CallbackQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.QueryID = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(From)
				}
				(*out.From).UnmarshalEasyJSON(in)
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(InputMessage)
				}
				(*out.Message).UnmarshalEasyJSON(in)
			}
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram10(out *jwriter.Writer, in CallbackQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.QueryID))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		if in.From == nil {
			out.RawString("null")
		} else {
			(*in.From).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		if in.Message == nil {
			out.RawString("null")
		} else {
			(*in.Message).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallbackQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallbackQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComHahaclassicElysiumInternalClientTelegram10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallbackQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallbackQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComHahaclassicElysiumInternalClientTelegram10(l, v)
}
